<UserControl x:Class="Memento.UserControls.DeckEditorUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:Memento"
             xmlns:dal="clr-namespace:Memento.DAL;assembly=Memento.DAL"
             mc:Ignorable="d" d:Background="White"
             d:DesignHeight="1000" d:DesignWidth="1920">

    <UserControl.CommandBindings>
        <CommandBinding Command="{x:Static local:Commands.NewCardCommand}"
                        Executed="NewCard"/>
        
        <CommandBinding Command="{x:Static local:Commands.NewExistingCardCommand}"
                        Executed="NewExistingCard"/>
        
        <CommandBinding Command="{x:Static local:Commands.SaveCardCommand}"
                        Executed="SaveCard" CanExecute="SaveCardCommand_CanExecute"/>

        <CommandBinding Command="{x:Static local:Commands.RemoveCardCommand}"
                        Executed="RemoveCard" CanExecute="RemoveCardCommand_CanExecute"/>

        <CommandBinding Command="{x:Static local:Commands.SaveDeckCommand}"
                        Executed="SaveDeck" CanExecute="SaveDeckCommand_CanExecute"/>

        <CommandBinding Command="{x:Static local:Commands.RemoveDeckCommand}"
                        Executed="RemoveDeck" CanExecute="RemoveDeckCommand_CanExecute"/>
    </UserControl.CommandBindings>

    <UserControl.Resources>
        <Style TargetType="{x:Type RadioButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <BulletDecorator Background="White" Cursor="Hand">
                            <BulletDecorator.Bullet>
                                <Grid/>
                            </BulletDecorator.Bullet>

                            <TextBlock x:Name="DifficultyText"
                                       VerticalAlignment="Stretch" Margin="0 0 0 5"
                                       HorizontalAlignment="Center">
                                <ContentPresenter/>
                            </TextBlock>
                        </BulletDecorator>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="DifficultyText" Property="FontWeight" Value="Bold"/>
                                <Setter TargetName="DifficultyText" Property="TextDecorations" Value="Underline"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>        
    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="48"/>
            <ColumnDefinition Width="3*" MinWidth="600"/>
            <ColumnDefinition Width="36"/>
            <ColumnDefinition Width="*" MinWidth="400"/>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="48"/>
            <RowDefinition Height="25*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="1" Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="24"/>
                <RowDefinition Height="30*"/>
                <RowDefinition Height="3*"/>
                <RowDefinition Height="12*"/>
                <RowDefinition Height="2*"/>
                <RowDefinition Height="2*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Grid Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="12*"/>
                    <ColumnDefinition Width="2*"/>
                    <ColumnDefinition Width="30*"/>
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1*"/>
                        <RowDefinition Height="3*"/>
                        <RowDefinition Height="1*"/>
                    </Grid.RowDefinitions>
                    
                    <Viewbox VerticalAlignment="Stretch"
                             HorizontalAlignment="Stretch" Grid.Row="1">
                        <StackPanel HorizontalAlignment="Center">
                            <StackPanel.Resources>
                                <local:EqualsConverter x:Key="equalsConverter"/>
                            </StackPanel.Resources>
                            
                            <TextBlock Text="Difficulty" Grid.Row="0" Margin="0 0 0 5"
                                       HorizontalAlignment="Center" FontStyle="Italic"/>
                            
                            <RadioButton x:Name="BeginnerButton" Content="Beginner"
                                         IsChecked="{Binding Path=CurrentCard.Difficulty, Converter={StaticResource equalsConverter}, ConverterParameter={x:Static dal:Difficulty.Beginner}}"/>

                            <RadioButton x:Name="IntermediateButton" Content="Intermediate"
                                         IsChecked="{Binding Path=CurrentCard.Difficulty, Converter={StaticResource equalsConverter}, ConverterParameter={x:Static dal:Difficulty.Intermediate}}"/>

                            <RadioButton x:Name="AdvancedButton" Content="Advanced"
                                         IsChecked="{Binding Path=CurrentCard.Difficulty, Converter={StaticResource equalsConverter}, ConverterParameter={x:Static dal:Difficulty.Advanced}}"/>

                            <RadioButton x:Name="NoneButton" Content="None"
                                         IsChecked="{Binding Path=CurrentCard.Difficulty, Converter={StaticResource equalsConverter}, ConverterParameter={x:Static dal:Difficulty.None}}"/>
                        </StackPanel>
                    </Viewbox>
                </Grid>

                <Grid Grid.Column="3">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="14*"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>

                    <Grid.RowDefinitions>
                        <RowDefinition Height="1*"/>
                        <RowDefinition Height="14*"/>
                        <RowDefinition Height="1*"/>
                    </Grid.RowDefinitions>

                    <Rectangle Grid.Row="1" Grid.Column="1" Stroke="DarkGray"
                               Fill="LightGray"
                               HorizontalAlignment="Stretch"
                               VerticalAlignment="Stretch"/>

                    <TextBlock Grid.Row="1" Grid.Column="1" Text="Image"
                               HorizontalAlignment="Center" Foreground="Gray"
                               VerticalAlignment="Center"/>

                    <TextBlock Grid.Row="1" Grid.Column="1" Text="(Click to add)"
                               HorizontalAlignment="Center" Foreground="Gray" Margin="0 25 0 0"
                               VerticalAlignment="Center"/>

                    <Image Grid.Row="1" Grid.Column="1" Source="{Binding CurrentCard.ImagePath}"
                           x:Name="CardImage"/>

                    <Button Grid.Row="1" Grid.Column="1" Click="ImageButton_Click">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border Background="{TemplateBinding Background}">
                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </Grid>

            <Grid Grid.Row="3" MinHeight="200">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="10*"/>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="20*"/>
                    <ColumnDefinition Width="1*"/>
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="0" VerticalAlignment="Stretch">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="3*"/>
                        <RowDefinition Height="3*"/>
                        <RowDefinition Height="2*"/>
                        <RowDefinition Height="3*"/>
                        <RowDefinition Height="3*"/>
                    </Grid.RowDefinitions>

                    <TextBox Grid.Row="1" x:Name="WordTextBox" Text="{Binding CurrentCard.Word, Mode = TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             Background="#F7F7F7F7" TextAlignment="Center" MaxLength="100"
                             VerticalContentAlignment="Center" TextWrapping="Wrap"/>

                    <TextBlock Grid.Row="1" IsHitTestVisible="False" Text="Word"
                               HorizontalAlignment="Center" Foreground="DarkGray"
                               VerticalAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Text, ElementName=WordTextBox}" Value=""/>
                                            <Condition Binding="{Binding IsFocused, ElementName=WordTextBox}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>

                    <TextBox Grid.Row="3" Background="#F7F7F7F7" x:Name="TranscriptionTextBox"
                             TextAlignment="Center" VerticalContentAlignment="Center" TextWrapping="Wrap"
                             Text="{Binding CurrentCard.Transcription, Mode = TwoWay}" MaxLength="100"/>

                    <TextBlock Grid.Row="3" IsHitTestVisible="False" Text="Transcription"
                               HorizontalAlignment="Center" Foreground="DarkGray"
                               VerticalAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Text, ElementName=TranscriptionTextBox}" Value=""/>
                                            <Condition Binding="{Binding IsFocused, ElementName=TranscriptionTextBox}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Grid>

                <TextBox x:Name="DescriptionTextBox" Background="#F7F7F7F7" TextWrapping="Wrap"
                         Grid.Column="2" MaxLength="500" Text="{Binding CurrentCard.Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                <TextBlock Grid.Column="2" IsHitTestVisible="False" Text="Description..."
                           HorizontalAlignment="Left"
                           Margin="5,2,0,0" Foreground="DarkGray">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Text, ElementName=DescriptionTextBox}" Value=""/>
                                        <Condition Binding="{Binding IsFocused, ElementName=DescriptionTextBox}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Visibility" Value="Visible"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <TextBlock Grid.Column="2" IsHitTestVisible="False" Text="0/500"
                           HorizontalAlignment="Right" VerticalAlignment="Bottom"
                           Margin="0 0 5 3" Foreground="DarkGray" x:Name="DescriptionLimit"/>
            </Grid>

            <Button Grid.Row="4" Content="&#xE72B;" FontFamily="Segoe MDL2 Assets"
                    HorizontalAlignment="Left" Grid.RowSpan="2" VerticalAlignment="Bottom"
                    x:Name="GoBackButton" Click="GoBackButton_Click"
                    Background="White" BorderBrush="White">
                <Button.LayoutTransform>
                    <ScaleTransform ScaleX="3" ScaleY="3" />
                </Button.LayoutTransform>
            </Button>
        </Grid>

        <Grid Grid.Row="1" Grid.Column="3">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="20"/>
                <RowDefinition Height="10"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="20"/>
                <RowDefinition Height="20"/>
                <RowDefinition Height="10"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0">
                <ComboBox Width="100" Margin="0 0 25 20" x:Name="DecksCombox"
                      SelectionChanged="ComboBox_SelectionChanged"
                      DropDownClosed="ComboBox_DropDownClosed"
                      ItemsSource="{Binding DeckEditor.AllDecks}" HorizontalAlignment="Left"/>

                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                            Margin="0 0 0 20">
                    <Button x:Name="NewDeckButton" Width="100" Margin="0 0 15 0"
                        Content="New Deck" Click="NewDeckButton_Click"/>

                    <Button x:Name="SaveDeckButton" Width="100" Margin="0 0 15 0"
                        Content="Save Deck" Command="{x:Static local:Commands.SaveDeckCommand}"/>

                    <Button x:Name="RemoveDeckButton" Width="100"
                        Content="Remove Deck" Command="{x:Static local:Commands.RemoveDeckCommand}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                            Margin="0 0 0 20">
                    <Button Content="New Card" Width="100" Margin="0 0 15 0"
                        Command="{x:Static local:Commands.NewCardCommand}"/>

                    <Button Content="New Existing Card" Width="120"
                        Command="{x:Static local:Commands.NewExistingCardCommand}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                            Margin="0 0 0 20">
                    <Button Content="Save Card" Width="100" Margin="0 0 15 0"
                        Command="{x:Static local:Commands.SaveCardCommand}"/>

                    <Button Content="Remove Card" Width="100"
                        Command="{x:Static local:Commands.RemoveCardCommand}"/>
                </StackPanel>
            </StackPanel>

            <StackPanel Grid.Row="1" Orientation="Horizontal">
                <StackPanel.Resources>
                    <local:IntStringConverter x:Key="intStringConverter"/>
                </StackPanel.Resources>

                <TextBlock Text="Cards: "/>
                <TextBlock Text="{Binding Path=DeckEditor.Deck.Count, Converter={StaticResource intStringConverter}, UpdateSourceTrigger=PropertyChanged}"/>
            </StackPanel>

            <DataGrid ItemsSource="{Binding DeckEditor.Deck.Cards}" IsReadOnly="True"
                          x:Name="CardsDataGrid" AutoGenerateColumns="False" Grid.Row="3">
                <DataGrid.ItemContainerStyle>
                    <Style TargetType="DataGridRow">
                        <EventSetter Event="MouseDoubleClick" Handler="Row_DoubleClick"/>
                    </Style>
                </DataGrid.ItemContainerStyle>

                <DataGrid.Columns>
                    <DataGridTextColumn Header="Card" Binding="{Binding Path=Word}"
                                        Width="350"/>
                </DataGrid.Columns>
            </DataGrid>

            <TextBlock Grid.Row="5" Text="Tags:"/>
            
            <ScrollViewer Grid.Row="7">
                <!--<DataGrid ItemsSource="{Binding DeckEditor.Deck}" IsReadOnly="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Binding="{Binding Path=Cards.Word}"/>
                    </DataGrid.Columns>
                </DataGrid>-->
            </ScrollViewer>
        </Grid>
    </Grid>
</UserControl>
